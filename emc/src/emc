#!/usr/bin/env python3

import sys, os

from PyQt6.QtWidgets import QApplication, QMainWindow
from PyQt6 import uic
from PyQt6.QtCore import Qt, QTimer, QEvent

# disable cache usage must be before any local imports
sys.dont_write_bytecode = True

import linuxcnc

from libemc import connections
from libemc import commands
from libemc import status
from libemc import startup
from libemc import editor

class emc_gui(QMainWindow):
	def __init__(self):
		super().__init__()
		'''
		if os.path.split(sys.argv[0])[0] == '/usr/bin':
			self.lib_path = '/usr/lib/libmesact'
			self.docs_path = '/usr/share/doc/mesact'
			self.installed = True
			uic.loadUi(os.path.join(self.lib_path, 'mesact.ui'), self)
		else:
			srcPath = os.path.split(os.path.realpath(sys.argv[0]))[0]
			self.lib_path = os.path.join(srcPath, 'libmesact')
			self.docs_path = srcPath
			self.installed = False
			uic.loadUi(os.path.join(srcPath, 'mesact.ui'), self)
		stylesheet = os.path.join(self.lib_path, 'mesact.qss')
		with open(stylesheet,'r') as fh:
			self.setStyleSheet(fh.read())
		'''
		print(os.path.split(sys.argv[0])[0])
		print(os.path.dirname(os.path.realpath(sys.argv[0])))

		# get the path to the executable
		self.path = os.path.dirname(os.path.realpath(sys.argv[0]))

		# set the library path
		if self.path == '/usr/bin':
			self.lib_path = '/usr/lib/libemc'
			self.gui_path = '/usr/lib/libemc'
		else:
			self.lib_path = os.path.join(self.path, 'libemc')
			self.gui_path = self.path

		print(f'Program Path: {self.path}')
		print(f'Library Path: {self.lib_path}')
		print(f'GUI Path: {self.gui_path}')


		# connect to linuxcnc
		self.emc = linuxcnc
		self.status = linuxcnc.stat()
		self.status.poll()
		self.command = linuxcnc.command()
		self.error = linuxcnc.error()
		self.inifile = False
		for i in range(len(sys.argv)):
			if sys.argv[i].endswith('.ini'):
				self.inifile = linuxcnc.ini(sys.argv[i])
				break
		if not self.inifile:
			self.inifile = linuxcnc.ini(self.status.ini_filename)

		# find and load the gui
		gui = self.inifile.find('DISPLAY', 'GUI') or False
		if gui:
			gui_path = os.path.join(os.path.dirname(self.status.ini_filename), gui)
			if not os.path.isfile(gui_path):
				gui_path = os.path.join(self.gui_path, 'emc.ui')
		else:
			gui_path = os.path.join(self.gui_path, 'emc.ui')
		
		uic.loadUi(gui_path, self)

		# find and load the stylesheet
		stylesheet = os.path.join(self.lib_path, 'emc.qss')
		qss = self.inifile.find('DISPLAY', 'QSS') or False
		if qss: # load local qss file make sure it exists !!!!!
			if os.path.isfile(os.path.join(self.ini_path, qss)):
				stylesheet = os.path.join(self.ini_path, qss)

		with open(stylesheet,'r') as fh:
			self.setStyleSheet(fh.read())

		self.joints = int(self.inifile.find('KINS', 'JOINTS')) or False
		connections.connect(self)
		startup.setup_jog(self)
		startup.set_labels(self)
		startup.set_buttons(self)
		startup.load_combos(self)
		startup.get_list_widgets(self)
		startup.get_pte(self)

		# setup and start the status update timer every 0.1 second
		self.timer = QTimer()
		self.timer.timeout.connect(self.update_status)
		self.timer.start(10) # milliseconds
		self.show()

	def update_status(self):
		self.status.poll()
		status.update(self)

	def eventFilter(self, obj, event):
		if obj is self.gcode_pte.viewport() and event.type() == QEvent.Type.MouseButtonRelease:
			if event.button() == Qt.MouseButton.LeftButton:
				editor.show_line(self)
		return super(emc_gui, self).eventFilter(obj, event)

if __name__ == '__main__':
	app = QApplication(sys.argv)
	gui = emc_gui()
	sys.exit(app.exec())
