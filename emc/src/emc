#!/usr/bin/env python3

import sys, os

from PyQt6.QtWidgets import QApplication, QMainWindow
from PyQt6 import uic
from PyQt6.QtCore import QTimer

# disable cache usage must be before any local imports
sys.dont_write_bytecode = True

import linuxcnc

from libemc import connections
from libemc import commands
from libemc import status
from libemc import startup

class main(QMainWindow):
	def __init__(self):
		super().__init__()

		# get the path to the executable
		self.path = os.path.dirname(os.path.realpath(sys.argv[0]))
		#print(self.path)

		# set the library path
		if self.path == '/usr/bin':
			self.lib_path = '/usr/lib/libemc'
		else:
			self.lib_path = os.path.join(self.path, 'libemc')

		# connect to linuxcnc
		self.emc = linuxcnc
		self.status = linuxcnc.stat()
		self.status.poll()
		self.command = linuxcnc.command()
		self.error = linuxcnc.error()
		self.inifile = False
		for i in range(len(sys.argv)):
			if sys.argv[i].endswith('.ini'):
				self.inifile = linuxcnc.ini(sys.argv[i])
				break
		if not self.inifile:
			self.inifile = linuxcnc.ini(self.status.ini_filename)

		# find and load the gui
		gui = self.inifile.find('DISPLAY', 'GUI') or False
		if gui:
			gui_path = os.path.join(os.path.dirname(self.status.ini_filename), gui)
			if not os.path.isfile(gui_path):
				gui_path = os.path.join(self.path, 'emc.ui')
		else:
			gui_path = os.path.join(self.path, 'emc.ui')
			#print(gui_path)
		uic.loadUi(gui_path, self)

		# find and load the stylesheet
		stylesheet = os.path.join(self.lib_path, 'emc.qss')
		qss = self.inifile.find('DISPLAY', 'QSS') or False
		if qss: # load local qss file make sure it exists !!!!!
			if os.path.isfile(os.path.join(self.ini_path, qss)):
				stylesheet = os.path.join(self.ini_path, qss)

		with open(stylesheet,'r') as fh:
			self.setStyleSheet(fh.read())

		connections.connect(self)
		startup.set_labels(self)
		startup.set_buttons(self)
		#startup.print_constants(self)

		# setup and start the status update timer every 0.1 second
		self.timer = QTimer()
		self.timer.timeout.connect(self.update_status)
		self.timer.start(100) # milliseconds
		self.show()

	def update_status(self):
		self.status.poll()
		status.update(self)
		#print('updated')
		#self.estop_status_lb.setText(f'{self.status.estop}')

if __name__ == '__main__':
	app = QApplication(sys.argv)
	gui = main()
	sys.exit(app.exec())
